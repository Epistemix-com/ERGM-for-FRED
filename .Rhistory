grade_by_school %>%
mutate(school = factor(school, levels = c("C-ES", 'P-ES', 'C-EM1', 'C-EM2', 'P-MS1', 'P-MS2', 'C-HS', 'P-HS')),
grade = factor(grade, levels(grade[order(grade_by_school %>% distinct(grade_numeric) %>% pull()]))) %>%
grade_by_school %>%
mutate(school = factor(school, levels = c("C-ES", 'P-ES', 'C-EM1', 'C-EM2', 'P-MS1', 'P-MS2', 'C-HS', 'P-HS')),
grade = factor(grade, levels(unique(grade_by_school$grade)[order(grade_by_school %>% distinct(grade_numeric) %>% pull()]))) %>%
grade_by_school %>%
mutate(school = factor(school, levels = c("C-ES", 'P-ES', 'C-EM1', 'C-EM2', 'P-MS1', 'P-MS2', 'C-HS', 'P-HS')),
grade = factor(grade, levels = c(unique(grade_by_school$grade)[order(grade_by_school %>% distinct(grade_numeric) %>% pull()]))) %>%
grade_by_school %>%
mutate(school = factor(school, levels = c("C-ES", 'P-ES', 'C-EM1', 'C-EM2', 'P-MS1', 'P-MS2', 'C-HS', 'P-HS')),
grade = factor(grade, levels = c(unique(grade_by_school$grade)[order(grade_by_school %>% distinct(grade_numeric) %>% pull()])))) %>%
grade_by_school %>%
mutate(school = factor(school, levels = c("C-ES", 'P-ES', 'C-EM1', 'C-EM2', 'P-MS1', 'P-MS2', 'C-HS', 'P-HS')),
grade = factor(grade, levels = names(grade_to_num))) %>%
ggplot(aes(x = school, y = grade_size, fill = grade)) +
geom_col()
grade_by_school %>%
mutate(school = factor(school, levels = c("C-ES", 'P-ES', 'C-EM1', 'C-EM2', 'P-MS1', 'P-MS2', 'C-HS', 'P-HS')),
grade = factor(grade, levels = rev(names(grade_to_num)))) %>%
ggplot(aes(x = school, y = grade_size, fill = grade)) +
geom_col()
subgraphs
subgraphs
ergm_thresh <- lapply(subgraphs, function(x){ergm(x~edges)})
library(ergm)
ergm_thresh <- lapply(subgraphs, function(x){ergm(x~edges)})
ergm_thresh <- lapply(subgraphs, function(x){x})
ergm_thresh
ergm_thresh[[1]]
ergm_thresh <- lapply(subgraphs, function(g){lapply(g, function(x){ergm(x~edges)})})
ergm_thresh
ergm_thresh[[1]]
graphs
ergms_no_thresh <- lapply(graphs, function(g){
ergm(g ~ edges + nodemix('grade'))
}
)
ergm_thresh <- lapply(subgraphs, function(g){
lapply(g, function(x){
ergm(x ~ edges + nodemix('grade'))
})
})
ergm-thresh
ergm_thresh
plot(ergm_no_thresh[[1]]))
ergms_no_thresh
ergms_no_thresh
ergm_no_thresh <- ergms_no_thresh
rm(ergms_no_thresh)
plot(ergm_no_thresh[[1]])
ergm_no_thresh
plot(simulate(ergm_no_thresh[[1]]))
?simulate
plot(simulate(ergm_no_thresh[[1]]), vertex.col='grade')
grade_by_school %>%
mutate(grade = factor(grade, levels = grade_to_num))
ggplot(aes(x = grade_numeric, y = grade_size, fill = school)) +
geom_col()
grade_by_school
grade_by_school %>%
mutate(grade = factor(grade, levels = c(grade_to_num)))
ggplot(aes(x = grade_numeric, y = grade_size, fill = school)) +
geom_col()
grade_by_school %>%
mutate(grade = factor(grade, levels = c(grade_to_num))) %>%
ggplot(aes(x = grade_numeric, y = grade_size, fill = school)) +
geom_col()
grade_by_school %>%
mutate(grade = factor(grade, levels = c(grade_to_num))) %>%
ggplot(aes(x = grade, y = grade_size, fill = school)) +
geom_col()
grade_by_school %>%
mutate(grade = factor(grade, levels = grade_to_num)) %>%
ggplot(aes(x = grade, y = grade_size, fill = school)) +
geom_col()
grade_by_school %>%  %>%
grade_by_school %>%  %>%
grade_by_school %>%  ggplot(aes(x = grade, y = grade_size, fill = school)) +
geom_col()
grade_by_school %>%  %>% mutate(grade = factor(grade, levels = names(grade_to_num)))
grade_by_school %>%  mutate(grade = factor(grade, levels = names(grade_to_num))) %>%
ggplot(aes(x = grade, y = grade_size, fill = school)) +
geom_col()
grade_by_school %>%  mutate(grade = factor(grade, levels = names(grade_to_num))) %>%
ggplot(aes(x = grade, y = grade_size, fill = school)) +
geom_col()+theme(axis.text.x = element_text(angle = 45, hjust = 1))
grade_by_school %>%  mutate(grade = factor(grade, levels = names(grade_to_num))) %>%
ggplot(aes(x = grade, y = grade_size, fill = school)) +
geom_col()+theme(axis.text.x = element_text(angle = 45))
grade_by_school %>%  mutate(grade = factor(grade, levels = names(grade_to_num))) %>%
ggplot(aes(x = grade, y = grade_size, fill = school)) +
geom_col()+theme(axis.text.x = element_text(angle = 45, hjust = 1))
grade_by_school %>%  mutate(grade = factor(grade, levels = names(grade_to_num))) %>%
ggplot(aes(x = grade, y = grade_size, fill = school)) +
geom_col()+theme(axis.text.x = element_text(angle = 135, hjust = 1))
grade_by_school %>%  mutate(grade = factor(grade, levels = names(grade_to_num))) %>%
ggplot(aes(x = grade, y = grade_size, fill = school)) +
geom_col()+theme(axis.text.x = element_text(angle = -45, hjust = 1))
grade_by_school %>%  mutate(grade = factor(grade, levels = names(grade_to_num))) %>%
ggplot(aes(x = grade, y = grade_size, fill = school)) +
geom_col()+theme(axis.text.x = element_text(angle = -45))
grade_by_school %>%  mutate(grade = factor(grade, levels = names(grade_to_num))) %>%
ggplot(aes(x = grade, y = grade_size, fill = school)) +
geom_col()+theme(axis.text.x = element_text(angle = -45, hjust=1))
grade_by_school %>%  mutate(grade = factor(grade, levels = names(grade_to_num))) %>%
ggplot(aes(x = grade, y = grade_size, fill = school)) +
geom_col()+theme(axis.text.x = element_text(angle = -45, hjust=-1))
grade_by_school %>%  mutate(grade = factor(grade, levels = names(grade_to_num))) %>%
ggplot(aes(x = grade, y = grade_size, fill = school)) +
geom_col()+theme(axis.text.x = element_text(angle = 45, hjust=1))
grade_by_school %>%  mutate(grade = factor(grade, levels = names(grade_to_num))) %>%
ggplot(aes(x = grade, y = grade_size, fill = school)) +
geom_col()+theme(axis.text.x = element_text(angle = 45, hjust = 1))
for (i in 1:1){
g <- graphs[[i]]
grade_numerics <- unique(g %v% 'grade_numeric')
grade_names <- unique(g %v% 'grade')
school_name <- names(graphs)[i]
model_g <- simulate(ergm_no_thresh[[i]])
par(las=F)
par(mfrow=c(1,2)) # 2 by 3 plotting frame
for (j in c(1, 2)){
plot(g, vertex.col='grade');
plot(model_g, vertex.col='grade');
if (j == 1)
legend('bottomleft',title = school_name, legend = grade_names[order(grade_numerics)], fill = grade_numerics + 1, cex=0.75)
}
}
for (j in c(1,2)){print(j)}
for (i in 1:1){
g <- graphs[[i]]
grade_numerics <- unique(g %v% 'grade_numeric')
grade_names <- unique(g %v% 'grade')
school_name <- names(graphs)[i]
model_g <- simulate(ergm_no_thresh[[i]])
par(las=F)
par(mfrow=c(1,2)) # 2 by 3 plotting frame
for (j in c(1, 2)){
if (j == 1)
legend('bottomleft',title = school_name, legend = grade_names[order(grade_numerics)], fill = grade_numerics + 1, cex=0.75)
}
}
for (i in 1:1){
g <- graphs[[i]]
grade_numerics <- unique(g %v% 'grade_numeric')
grade_names <- unique(g %v% 'grade')
school_name <- names(graphs)[i]
model_g <- simulate(ergm_no_thresh[[i]])
par(las=F)
par(mfrow=c(1,2)) # 2 by 3 plotting frame
for (j in c(1, 2)){
if (j == 1){
plot(g, vertex.col='grade');
legend('bottomleft',title = school_name, legend = grade_names[order(grade_numerics)], fill = grade_numerics + 1, cex=0.75)
}
else{
plot(model_g, vertex.col='grade')
}
}
}
for (i in 1:1){
# get graph and legend objects
g <- graphs[[i]]
grade_numerics <- unique(g %v% 'grade_numeric')
grade_names <- unique(g %v% 'grade')
school_name <- names(graphs)[i]
model_g <- simulate(ergm_no_thresh[[i]])
par(las=F)
par(mfrow=c(1,2)) # 2 by 3 plotting frame
# plot 1 by 2 of graph then model graph
for (j in c(1, 2)){
if (j == 1){
plot(g, vertex.col='grade');
legend('bottomleft',title = paste(school_name, "(No Threshold)"), legend = grade_names[order(grade_numerics)], fill = grade_numerics + 1, cex=0.75)
}
else{
plot(model_g, vertex.col='grade')
}
}
}
for (i in 1:(length(subgraphs))){
sub <- subgraphs[[i]]
grade_numerics <- unique(sub[[1]] %v% 'grade_numeric')
grade_names <- unique(sub[[1]] %v% 'grade')
school_name <- names(subgraphs)[i]
model_sub <- ergm_thresh[[i]]
par(las=F)
par(mfrow=c(2,3)) # 2 by 3 plotting frame
for (j in 1:(length(sub))){
g <- sub[[j]]
model_g <- model_sub[[j]]
for (j in c(1, 2)){
if (j == 1){
plot(g, vertex.col='grade');
legend('bottomleft',title = paste(school_name, "(No Threshold)"), legend = grade_names[order(grade_numerics)], fill = grade_numerics + 1, cex=0.75)
}
else{
plot(model_g, vertex.col='grade')
}
}
}
}
for (i in 1:1){
sub <- subgraphs[[i]]
grade_numerics <- unique(sub[[1]] %v% 'grade_numeric')
grade_names <- unique(sub[[1]] %v% 'grade')
school_name <- names(subgraphs)[i]
model_sub <- ergm_thresh[[i]]
par(las=F)
par(mfrow=c(2,3)) # 2 by 3 plotting frame
for (j in 1:1){
g <- sub[[j]]
model_g <- model_sub[[j]]
for (j in c(1, 2)){
if (j == 1){
plot(g, vertex.col='grade');
legend('bottomleft',title = paste(school_name, "(No Threshold)"), legend = grade_names[order(grade_numerics)], fill = grade_numerics + 1, cex=0.75)
}
else{
plot(simulate(model_g, nsim=1), vertex.col='grade')
}
}
}
}
weights <- seq(30, 180, by=30)
plot(rnorm(10), rnorm(10)); legend(cex = 2)
plot(rnorm(10), rnorm(10)); legend(legend = 'hi', cex = 2)
plot(rnorm(10), rnorm(10)); legend(legend = c('hi', 'there'), cex = 2)
plot(rnorm(10), rnorm(10)); legend(legend = c(x = 'hi', y = 'there'), cex = 2)
plot(rnorm(10), rnorm(10)); legend('bottomleft', legend = c(x = 'hi', y = 'there'), cex = 2)
plot(rnorm(10), rnorm(10)); legend('bottomleft', legend = c(x = 'hi', y = 'there'), cex = 1)
ergm_no_thresh
ergm_no_thresh[[1]]
plot(gof(ergm_no_thresh[[1]]))
par(las=F)
plot(gof(ergm_thresh[[1]][[4]]))
gof(ergm_thresh[[1]][[4]])
tri_ergm <- ergm(subgraphs[[1]][[4]]~edges + nodemix('grade') + triangles)
tri_ergm <- ergm(subgraphs[[1]][[4]]~edges + nodemix('grade') + triangle('grade'))
tri_ergm <- ergm(subgraphs[[1]][[4]]~edges + nodemix('grade') + triangle('grade_numeric'))
tri_ergm <- ergm(subgraphs[[1]][[4]]~edges + nodemix('grade') + triangle)
?ergmTerm
tri_ergm <- ergm(subgraphs[[1]][[4]]~edges + nodemix('grade') + triangle('grade', diff=T))
summary(subgraphs[[1]][[4]]~edges + nodemix('grade') + triangle('grade', diff=T))
summary(subgraphs[[1]][[4]]~edges + nodemix('grade') + sociality)
summary(subgraphs[[1]][[4]]~edges + nodemix('grade') + sociality(subgraphs[[1]][[4]]))
summary(subgraphs[[1]][[4]]~edges + nodemix('grade') + localtriangle)
summary(subgraphs[[1]][[4]]~edges + nodemix('grade') + localtriangle(subgraphs[[1]][[4]]))
summary(subgraphs[[1]][[4]]~edges + nodemix('grade') + triangle('grade'))
summary(subgraphs[[1]][[4]]~edges + nodemix('grade') + triangle(grade))
summary(subgraphs[[1]][[4]]~edges + nodemix('grade') + triangles('grade'))
summary(subgraphs[[1]][[4]]~edges + triangles('grade', diff=T))
summary(subgraphs[[1]][[4]]~edges + nodemix('grade') + triangles('grade', diff=T))
tri_ergm <- ergm(subgraphs[[1]][[4]]~edges + nodemix('grade') + triangles('grade', diff=T))
?ergm
tri_ergm <- ergm(subgraphs[[1]][[4]]~edges + nodemix('grade'), constraint = degreedist)
tri_ergm <- ergm(subgraphs[[1]][[4]]~edges + nodemix('grade'))
?ergmTerm
tri_ergm <- ergm(subgraphs[[1]][[4]]~edges + nodemix('grade') + density)
tri_ergm
plot(tri_ergm)
plot(simulate(tri_ergm))
tri_ergm <- ergm(subgraphs[[1]][[4]]~edges + nodemix('grade') + degree)
tri_ergm <- ergm(subgraphs[[1]][[4]]~edges + nodemix('grade') + degree(by='grade'))
tri_ergm <- ergm(subgraphs[[1]][[4]]~edges + nodemix('grade') + degree(d = 1:10, by='grade'))
tri_ergm <- ergm(subgraphs[[1]][[4]]~edges + nodemix('grade') + degree(d = 1:20, by='grade'))
?gof
tri_ergm <- ergm(subgraphs[[1]][[4]]~edges + nodemix('grade') + esp)
?esp
tri_ergm <- ergm(subgraphs[[1]][[4]]~edges + nodemix('grade') + nodefactor('grade'))
plot(simulate(tri_ergm))
tri_ergm
tri_ergm <- ergm(subgraphs[[1]][[4]]~edges + nodemix('grade') + nodemain('grade'))
tri_ergm <- ergm(subgraphs[[1]][[4]]~edges + nodemix('grade') + nodefactor('grade'))
tri_ergm <- ergm(subgraphs[[1]][[4]]~edges + nodemix('grade')
)
plot(simulate(tri_ergm))
tri_ergm <- ergm(subgraphs[[1]][[4]]~edges + nodemix('grade') + esp(1:100))
?ergmTerm
plot(gof(ergm_thresh[[1]][[4]]))
par(las=F)
par(mfrow=c(1,1))
plot(gof(ergm_thresh[[1]][[4]]))
par(las=F)
plot(gof(ergm_thresh[[1]][[4]]))
par(las=F);par(mfrow=c(2,2))
plot(gof(ergm_thresh[[1]][[4]]))
?`esp-ergmTerm`
tri_ergm <- ergm(subgraphs[[1]][[4]]~edges + nodemix('grade') + esp(20))
?`nodemix-ergmTerm`
tri_ergm <- ergm(subgraphs[[1]][[4]]~edges + nodemix('grade') + concurrentties('grade'))
random.graph.game(30, .5)
random.graph.game(30, .1)
random.graph.game(30, .2)
rand <- random.graph.game(30, .2)
gof_rand <- gof(ergm(rand ~ edges))
gof_rand <- gof(ergm(asNetwork(rand) ~ edges))
gof_rand
plot(gof_rand)
legend(title='hi')
legend(legend = 'bottomright',title='hi')
legend('bottomright',title='hi')
title('hi')
graphs
ergm_no_thresh
names(ergm_no_thresh)
subgraphs
names(subgraphs)
gof_no_thresh <- lapply(ergm_no_thresh, gof)
for (i in 1:length(gof_no_thresh)){
par(las=F);par(mfrow=c(2,2))
plot(gof_no_thresh[[i]])
title(names(gof_no_thresh)[i])
}
gof_no_thresh
lapply(ergm_thresh, function(g){lapply(g, summary)})
j <- lapply(ergm_thresh, function(g){lapply(g, summary)})
j %>% names
j[[1]]
j[[1]] %>% length
saveRDS(gof_no_thresh, "gof_no_thresh")
gof_no_thresh <- lapply(ergm_no_thresh, gof);
gof_no_thresh <- lapply(ergm_no_thresh, gof)
gof_thresh <- lapply(ergm_thresh, function(g){lapply(g, gof)})
saveRDS(gof_no_thresh, "gof_no_thresh")
saveRDS(gof_no_thresh, "gof_no_thresh_bin")
load("gof_no_thresh_bin")
saveRDS(gof_no_thresh, "gof_no_thresh_bin.RDS")
load("gof_no_thresh_bin")
readRDS('gof_no_thresh_bin')
hi <- readRDS('gof_no_thresh_bin')
hi
hi %>% di
hi %>% dim
hi %>% length
hi[[1]]
hi[[1]][[1]]
hi[[1]]
gof_thresh
gof_thresh[[1]]
gof_thresh[[1]][[2]]
saveRDS(gof_no_thresh, 'gof_no_thresh_bin.rds');saveRDS(gof_thresh, 'gof_thresh_bin.rds')
hi <- readRDS('gof_thresh_bin.rds')
hi %>% length
hi %>% names
hi[[1]]
hi[[1]][[1]]
source("import_JC_school_info.R")
jcsdf
jcsdf %>% glimpse
# Extract the grade sizes for this synthetic school
grade_sizes <- jcsdf %>%
filter(!is.na(grade_numeric)) %>%
count(grade_numeric)
grade_sizes
jcsdf
jcsdf %>% distinct(school)
# Extract the grade sizes for this synthetic school
jcsdf <- jcsdf %>%
filter(!is.na(grade_numeric))
jcsdf
fred_schools <- jcsdf %>% distinct(schools) %>% pull()
fred_schools <- jcsdf %>% distinct(school) %>% pull()
school_df <- jcsdf %>%
filter(school == fred_schools[1])
grade_sizes <- school-df %>%
count(grade_numeric)
school_df <- jcsdf %>%
filter(school == fred_schools[1])
grade_sizes <- school_df %>%
count(grade_numeric)
grade_sizes
network.initialize(sum(grade_sizes$n), directed = FALSE)
synthetic_network %v% "grade_numeric" <- rep(grade_sizes$grade_numeric, grade_sizes$n)
synthetic_network <- network.initialize(sum(grade_sizes$n), directed = FALSE)
synthetic_network %v% "grade_numeric" <- rep(grade_sizes$grade_numeric, grade_sizes$n)
synthetic_network
synthetic_network %v% 'vertex.names'
synthetic_network %v% "grade_numeric" <- school_df$grade_numeric
length(school_df$grade_numeric)
# Create an empty network with the desired number of nodes for each grade
synthetic_network <- network.initialize(sum(grade_sizes$n), directed = FALSE)
synthetic_network %v% "grade_numeric" <- school_df$grade_numeric
synthetic_network %v% "vertex.names" <- school_df$grade_numeric
# Create an empty network with the desired number of nodes for each grade
synthetic_network <- network.initialize(sum(grade_sizes$n), directed = FALSE)
synthetic_network %v% "grade_numeric" <- school_df$grade_numeric
synthetic_network %v% "vertex.names" <- school_df$person
synthetic_network
# Create an empty network with the desired number of nodes for each grade
synthetic_network <- network.initialize(sum(grade_sizes$n), directed = FALSE)
synthetic_network %v% "grade_numeric" <- school_df$grade_numeric
synthetic_network %v% "vertex.names"
# Create an empty network with the desired number of nodes for each grade
synthetic_network <- network.initialize(sum(grade_sizes$n), directed = FALSE)
synthetic_network %v% "grade_numeric" <- school_df$grade_numeric
synthetic_network %v% "vertex.names" <- school_df$person
synthetic_network
# Create an empty network with the desired number of nodes for each grade
synthetic_network <- network.initialize(sum(grade_sizes$n), directed = FALSE)
synthetic_network %v% "grade_numeric" <- school_df$grade_numeric
synthetic_network %v% "vertex.names"
# Create an empty network with the desired number of nodes for each grade
synthetic_network <- network.initialize(sum(grade_sizes$n), directed = FALSE)
synthetic_network %v% "grade_numeric" <- school_df$grade_numeric
synthetic_network %v% "vertex.names" <- school_df$person
synthetic_network %v% "vertex.names"
jcsdf %>% count(school, grade)
jcsdf %>% count(school, grade_name)
jcsdf %>% count(school)
jcsdf %>% count(school, grade_name)
jcsdf %>% count(school, grade_name) %>% pivot_wider(id_cols = 'grade_name')
jcsdf %>% count(school, grade_name) %>% pivot_wider(names_from = grade_name)
jcsdf %>% count(school, grade_name) %>% pivot_wider(names_from = grade_name, values_from = n)
jcsdf %>% count(school, grade_name) %>% pivot_wider(names_from = grade_name, values_from = n) %>% glimpse
jcsdf %>% count(school, grade_numeric) %>% pivot_wider(names_from = grade_name, values_from = n) %>% glimpse
jcsdf %>% count(school, grade_numeric) %>% pivot_wider(names_from = grade_numeric, values_from = n) %>% glimpse
jcsdf %>% count(school, grade_numeric) %>% arrange(grade_numeric) %>%  pivot_wider(names_from = grade_numeric, values_from = n) %>% glimpse
jcsdf %>%
count(school, grade_name) %>%
mutate(school = factor(school),
grade_name = factor(grade_name, levels = names(grade_to_num))) %>%
ggplot(aes(x = grade_name, y = n, fill = school)) +
geom_col() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
jcsdf %>%
count(school, grade_name)
names(grade_to_num)
jcsdf %>%
count(school, grade_name) %>%
mutate(school = factor(school),
grade_name = factor(grade_name, levels = names(grade_to_num)))
jcsdf %>% distinct(grade_name)
jcsdf %>% distinct(grade_name) %>% arrange
jcsdf %>% distinct(grade_name) %>% pull()
jcsdf %>% distinct(grade_name) %>% pull() %>% factor(., levels = names(grade_to_num))
grade_to_num
names(grade_to_num)
source("~/.active-rstudio-document", echo=TRUE)
jcsdf %>%
count(school, grade_name) %>%
mutate(school = factor(school),
grade_name = factor(grade_name, levels = names(grade_to_num)))
jcsdf %>%
count(school, grade_name) %>%
mutate(school = factor(school),
grade_name = factor(grade_name, levels = jcsdf %>% distinct(grade_name) %>% pull()))
jcsdf %>% distinct(grade_name) %>% pull()
jcsdf %>% distinct(grade_name) %>% pull() %in% names(grade_to_num)
for (i in jcsdf %>% distinct(grade_name) %>% pull()){i %in% names(grade_to_num)}
for (i in jcsdf %>% distinct(grade_name) %>% pull()){print(i %in% names(grade_to_num))}
jcsdf %>% distinct(grade_name) %>% pull()
names(grade_to_num)
toupper(names(grade_to_num))
totitle(names(grade_to_num))
str_to_title(names(grade_to_num))
jcsdf %>%
count(school, grade_name) %>%
mutate(school = factor(school),
grade_name = factor(grade_name, levels = str_to_title(names(grade_to_num)))) %>%
ggplot(aes(x = grade_name, y = n, fill = school)) +
geom_col() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
jcsdf %>%
count(school, grade_name) %>%
mutate(school = factor(school),
grade_name = factor(grade_name, levels = str_to_title(names(grade_to_num)))) %>%
ggplot(aes(x = grade_name, y = n, fill = school)) +
geom_col() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
jcsdf %>%
count(school, grade_name) %>%
mutate(grade_name = factor(grade_name, levels = rev(str_to_title(names(grade_to_num))))) %>%
ggplot(aes(x = school, y = n, fill = grade_name)) +
geom_col()
jcsdf %>%
count(school, grade_name) %>%
mutate(grade_name = factor(grade_name, levels = rev(str_to_title(names(grade_to_num))))) %>%
ggplot(aes(x = school, y = n, fill = grade_name)) +
geom_col()
jcsdf %>%
count(school, grade_name)
jcsdf %>%
count(school, grade_name) %>%
mutate(grade_name = factor(grade_name, levels = rev(str_to_title(names(grade_to_num))))) %>%
print()
jcsdf %>%
count(school, grade_name) %>%
mutate(school = factor(school),
grade_name = factor(grade_name, levels = rev(str_to_title(names(grade_to_num))))) %>%
ggplot(aes(x = school, y = n, fill = grade_name)) +
geom_col()
jcsdf %>%
count(school, grade_name) %>%
mutate(school = factor(school),
grade_name = factor(grade_name, levels = rev(str_to_title(names(grade_to_num))))) %>%
ggplot(aes(x = school, y = n, fill = grade_name)) +
geom_col()   +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
jcsdf %>%
count(school, grade_numeric) %>%
mutate(school = factor(school)) %>%
ggplot(aes(x = grade_numeric, y = grade_size, color = school)) +
geom_line() +
geom_point()
jcsdf %>%
count(school, grade_numeric) %>%
mutate(school = factor(school)) %>%
ggplot(aes(x = grade_numeric, y = n, color = school)) +
geom_line() +
geom_point()
